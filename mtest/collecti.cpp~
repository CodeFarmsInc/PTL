#include <iostream.h>
#define TEMPLATE_MANAGER
#include "pattern.h"

class A;
class B;

// only the SUN and WATCOM compilers require to comment out the end '{'
class A : Pattern(A) // {
    int mCode;
public:
    A(int i){mCode=i;}
    void prt(void){cout << mCode << '\n';}
};

// only the SUN and WATCOM compilers require to comment out the end '{'
class B : Pattern(B) // {
    int mVal;
public:
    B(int i){mVal=i;}
    void prt(void){cout << "    " << mVal << '\n';}
    static int cmp(const B* b1, const B* b2) { return (b1->mVal - b2->mVal);}
};

int main(void){
    int i;
    long k;
    pattern Collection<A,B,0> col0;
    pattern Collection<A,B,1> col1;
    // CollectionIterator<A,B,0> it0;
    // CollectionIterator<A,B,1> it1;
    pattern_iterator_col0 it0;
    pattern_iterator_col1 it1;

    // short variable names permit table-like code style when creating the data
    A a(888); B *b, *bp[5];
    
    for(i=0;i<5;i++){
        b=bp[i]=new B(i);
        col0.addHead(&a,b);
        col1.addTail(&a,b);
    }
    col0.sort(&a,B::cmp);
    // try some of the add..() functions, also insert() and append()
    b=new B(-1); col0.addSorted(&a,b,B::cmp); col1.insert(&a,bp[0],b);
    b=new B(3);  col0.addSorted(&a,b,B::cmp); col1.insert(&a,bp[3],b);
    b=new B(5);  col0.addSorted(&a,b,B::cmp); col1.append(&a,bp[3],b);
    b=new B(-2); col0.addHead(&a,b);          col1.append(&a,bp[4],b);
    b=new B(6);  col0.addTail(&a,b);          col1.insert(&a,bp[4],b);

    a.prt();
    ITERATE(it0,&a,b){ b->prt(); }
    a.prt();
    RETRACE(it0,&a,b){ b->prt(); }
    a.prt();
    ITERATE(it1,&a,b){ b->prt(); }

    ITERATE(it0,&a,b){
        col0.remove(&a,b);
        col1.remove(&a,b);
        delete b;
    }
    return(0);
}
